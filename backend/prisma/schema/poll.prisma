model MeetingPoll {
  id          Int                  @id @default(autoincrement())
  title       String
  description String?
  timezone    String?
  status      MeetingPollStatus    @default(OPEN)
  ownerUuid   String               @default(uuid())
  user        User?                @relation(fields: [userId], references: [id])
  userId      Int?
  options     MeetingPollOption[]
  settings    MeetingPollSettings?
  createdAt   DateTime?            @default(now())
  updatedAt   DateTime?            @updatedAt
}

model MeetingPollSettings {
  id                Int         @id @default(autoincrement())
  allowOnlyOneVote  Boolean?    @default(false)
  allowMaybeAnswer  Boolean?    @default(false)
  hideOthersAnswers Boolean?    @default(false)
  voteDeadline      DateTime?
  poll              MeetingPoll @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId            Int         @unique
}

model MeetingPollOption {
  id        Int                   @id @default(autoincrement())
  type      MeetingPollOptionType
  startTime DateTime?
  endTime   DateTime?
  date      String?
  votes     Vote[]
  poll      MeetingPoll           @relation(fields: [pollId], references: [id], onDelete: Cascade)
  pollId    Int
}

model Vote {
  id              Int               @id @default(autoincrement())
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId          Int?
  guestUuid       String?
  guestName       String?
  meetingOption   MeetingPollOption @relation(fields: [meetingOptionId], references: [id], onDelete: Cascade)
  meetingOptionId Int
  vote            VoteType
  createdAt       DateTime?         @default(now())
}

enum VoteType {
  YES
  NO
  MAYBE
}

enum MeetingPollStatus {
  OPEN
  PAUSED
}

enum MeetingPollOptionType {
  DATE
  TIME_RANGE
}
